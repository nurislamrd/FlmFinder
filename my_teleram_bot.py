import telebot
import requests
import sqlite3
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

bot = telebot.TeleBot('7453464704:AAHMk2G38eV72rBZL_8dXc3LWRhxAOn2GfI')

# –¢–≤–æ–π API-–∫–ª—é—á –æ—Ç TMDb
API_KEY = 'fa1c200dad02012b2c0c58a74376288e'

# –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        language_code TEXT,
        first_interaction TEXT,
        last_interaction TEXT
    )
''')
conn.commit()
conn.close()

# –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞ –∂–∞–Ω—Ä—ã TMDb
MOOD_TO_GENRE = {
    "–í–µ—Å–µ–ª–æ–µ üòä": 35,       # –ö–æ–º–µ–¥–∏—è
    "–ì—Ä—É—Å—Ç–Ω–æ–µ üò¢": 18,      # –î—Ä–∞–º–∞
    "–ù–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–µ üò±": 53,   # –¢—Ä–∏–ª–ª–µ—Ä
    "–†–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ ‚ù§Ô∏è": 10749, # –†–æ–º–∞–Ω—Ç–∏–∫–∞
    "–ü—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–æ–µ üåç": 12 # –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
}
def save_user(user):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    user_id = user.id
    username = user.username
    first_name = user.first_name
    last_name = user.last_name
    language_code = user.language_code
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        cursor.execute("UPDATE users SET last_interaction = ? WHERE user_id = ?", (current_time, user_id))
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("INSERT INTO users (user_id, username, first_name, last_name, language_code, first_interaction, last_interaction) VALUES (?, ?, ?, ?, ?, ?, ?)", 
                       (user_id, username, first_name, last_name, language_code, current_time, current_time))

    conn.commit()
    conn.close()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
def get_movies_by_genre(genre_id):
    url = f'https://api.themoviedb.org/3/discover/movie?api_key={API_KEY}&language=ru-RU&sort_by=popularity.desc&with_genres={genre_id}'
    response = requests.get(url)
    data = response.json()
    
    if 'results' in data:
        movies = []
        for movie in data['results'][:10]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Ñ–∏–ª—å–º–æ–≤
            title = movie.get('title')
            if not title:  # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –±–µ—Ä–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                title = get_original_title(movie['id'])
            movie['title'] = title
            movies.append(movie)
        return movies
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞, –µ—Å–ª–∏ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–µ—Ç
def get_original_title(movie_id):
    url = f'https://api.themoviedb.org/3/movie/{movie_id}?api_key={API_KEY}&language=en-US'
    response = requests.get(url)
    data = response.json()
    return data.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    save_user(message.from_user)
    # –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        "üé¨ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∏–Ω–æ–ë–æ—Ç!*\n\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –ª—é–±–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! –•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è —Å –∫–æ–º–µ–¥–∏–µ–π, –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ —Ä–æ–º–∞–Ω—Ç–∏–∫—É –∏–ª–∏ –∏—Å–ø—ã—Ç–∞—Ç—å –æ—Å—Ç—Ä—ã–µ –æ—â—É—â–µ–Ω–∏—è –æ—Ç —Ç—Ä–∏–ª–ª–µ—Ä–∞? –Ø –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏! üí•\n\n"
        "üìå *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n"
        "1Ô∏è‚É£ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ* ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤–∞–º —Ö–æ—á–µ—Ç—Å—è, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–¥–æ–π–¥—É—Ç.\n\n"
        "2Ô∏è‚É£ *–°–º–æ—Ç—Ä–∏—Ç–µ —Ç—Ä–µ–π–ª–µ—Ä—ã –∏ —á–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è* ‚Äî –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º, —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ –ª–µ–≥—á–µ –≤—ã–±—Ä–∞—Ç—å.\n\n"
        "3Ô∏è‚É£ *–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º!* üçø ‚Äî –Ω–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è —É—é—Ç–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞ –∏–ª–∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –∫–∏–Ω–æ—Å–µ–∞–Ω—Å–∞.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ /mood, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º –∏–¥–µ–∞–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏!"
    )
    bot.reply_to(message, text, parse_mode="Markdown")

@bot.message_handler(commands=['users'])
def list_users(message):
    users = get_users()
    total_users = count_users()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_list = "\n".join([f"ID: {user[0]}, Username: {user[1]}, Name: {user[2]} {user[3]}, Language: {user[4]}" for user in users])
    
    response = f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}" if user_list else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    MAX_MESSAGE_LENGTH = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    if len(response) > MAX_MESSAGE_LENGTH:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        chunks = [response[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(response), MAX_MESSAGE_LENGTH)]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for chunk in chunks:
            bot.send_message(message.chat.id, chunk)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –º–µ–Ω—å—à–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        bot.send_message(message.chat.id, response)
    

def get_users():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT user_id, username, first_name, last_name, language_code FROM users")
    users = cursor.fetchall()   
    
    conn.close()
    
    return users

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def count_users():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM users")
    user_count = cursor.fetchone()[0]

    conn.close()

    return user_count

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mood
@bot.message_handler(commands=['mood'])
def choose_mood(message):
    markup = InlineKeyboardMarkup()
    for mood in MOOD_TO_GENRE.keys():
        button = InlineKeyboardButton(text=mood, callback_data=f"mood_{mood}")
        markup.add(button)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("mood_"))
def mood_selected(call):
    mood = call.data.split("_")[1]
    genre_id = MOOD_TO_GENRE.get(mood)
    
    if genre_id:
        movies = get_movies_by_genre(genre_id)
        user_states[call.message.chat.id] = {
            'mood': mood,
            'movies': movies
        }
        
        if movies:
            show_movies_list(call.message.chat.id, mood, movies)
        else:
            bot.send_message(call.message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è *{mood}*.", parse_mode="Markdown")
    else:
        bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∫ –≤—ã–±–æ—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
def show_movies_list(chat_id, mood, movies):
    markup = InlineKeyboardMarkup()
    movie_list = ""
    for index, movie in enumerate(movies, start=1):
        title = movie['title']
        rating = movie['vote_average']
        movie_list += f"{index}. {title} (–†–µ–π—Ç–∏–Ω–≥: {rating})\n"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
        button = InlineKeyboardButton(
            text=f"{index}. {title}",
            callback_data=f"movie_{movie['id']}"
        )
        markup.add(button)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ –≤—ã–±–æ—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ", callback_data="back_to_mood")
    markup.add(back_button)
    
    bot.send_message(chat_id, f"–§–∏–ª—å–º—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è *{mood}*:\n\n{movie_list}", parse_mode="Markdown", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–ª–µ—Ä–∞ —Ñ–∏–ª—å–º–∞
def get_movie_trailer(movie_id):
    url = f'https://api.themoviedb.org/3/movie/{movie_id}/videos?api_key={API_KEY}&language=ru-RU'
    response = requests.get(url)
    data = response.json()

    if 'results' in data:
        for video in data['results']:
            if video['type'] == 'Trailer' and video['site'] == 'YouTube':
                return f"https://www.youtube.com/watch?v={video['key']}"
    return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å–º–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("movie_"))
def movie_details(call):
    movie_id = call.data.split("_")[1]
    url = f'https://api.themoviedb.org/3/movie/{movie_id}?api_key={API_KEY}&language=ru-RU'
    response = requests.get(url)
    movie = response.json()

    if movie:
        title = movie.get('title', get_original_title(movie_id))
        overview = movie.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')
        rating = movie.get('vote_average', 'N/A')
        release_date = movie.get('release_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–π–ª–µ—Ä
        trailer_url = get_movie_trailer(movie_id)
        trailer_text = f"\nüé• [–°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä]({trailer_url})" if trailer_url else "\n–¢—Ä–µ–π–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ —Ñ–∏–ª—å–º–µ
        movie_info = (f"üé¨ *{title}*\n\n"
                      f"üìÖ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {release_date}\n"
                      f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n\n"
                      f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {overview}"
                      f"{trailer_text}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É —Ñ–∏–ª—å–º–æ–≤
        markup = InlineKeyboardMarkup()
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ", callback_data="back_to_movies")
        markup.add(back_button)
        
        bot.send_message(call.message.chat.id, movie_info, parse_mode="Markdown", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ñ–∏–ª—å–º–æ–≤"
@bot.callback_query_handler(func=lambda call: call.data == "back_to_movies")
def back_to_movies(call):
    user_data = user_states.get(call.message.chat.id)
    
    if user_data:
        mood = user_data['mood']
        movies = user_data['movies']
        show_movies_list(call.message.chat.id, mood, movies)
    else:
        bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ñ–∏–ª—å–º–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
@bot.callback_query_handler(func=lambda call: call.data == "back_to_mood")
def back_to_mood(call):
    choose_mood(call.message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
bot.polling()
